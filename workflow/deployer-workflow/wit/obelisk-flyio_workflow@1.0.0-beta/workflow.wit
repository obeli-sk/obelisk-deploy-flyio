package obelisk-flyio:workflow@1.0.0-beta;

interface workflow {
    use types.{obelisk-config, secret-key, app-init-no-cleanup-error, app-init-error, serve-error};

    /// Chcek whether the app_name exists. If it does, return app-name-conflict.
    /// Create a fly app.
    /// Create a volume.
    /// Launch a temporary VM.
    /// Store the config file and download WASM components + AOT generated code (`obelisk server verify --ignore-missing-env-vars`).
    /// Shutdown and delete the temporary VM.
    /// Return list of secret keys the config requires.
    app-init-no-cleanup-on-error: func(
        org-slug: string,
        app-name: string,
        config: obelisk-config,
        ) -> result<list<secret-key>, app-init-no-cleanup-error>;

    /// Same as `app-init-no-cleanup` but performs cleanup on errors.
    /// If an error occurs during app configuration
    /// the app is deleted, leaving the state as it was before this function was called.
    /// If the cleanup fails as well `cleanup-error` is raised.
    app-init: func(
        org-slug: string,
        app-name: string,
        config: obelisk-config,
        ) -> result<list<secret-key>, app-init-error>;

    /// Serve Obelisk app on a VM.
    serve: func(app-name: string) -> result<_, serve-error>;
}

world exports {
    export workflow;
}
