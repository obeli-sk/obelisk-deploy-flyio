package obelisk-flyio:workflow@1.0.0-beta;

interface workflow {
    use types.{obelisk-config, app-init-modify-error, app-init-error};

    /// Create the Fly.io app.
    /// Allocate an IP address.
    /// Create and prepare a volume.
    prepare: func(
        org-slug: string,
        app-name: string,
        config: obelisk-config,
        ) -> result<_, app-init-modify-error>;

    /// Wait until secrets are populated or app is deleted.
    wait-for-secrets: func(
        app-name: string,
        config: obelisk-config,
        ) -> result<_, app-init-modify-error>;

    /// Start the MinIO VM.
    minio-start: func(
        app-name: string,
        ) -> result<string, app-init-modify-error>;

    /// Initialize the litestream bucket.
    minio-configure: func(
        app-name: string,
        machine-id: string,
        ) -> result<_, app-init-modify-error>;

    /// Start the final VM.
    start-final-vm: func(
        app-name: string,
        ) -> result<_, app-init-modify-error>;

    /// Wait until health check passes, observing the deadline, or app is deleted.
    wait-for-health-check: func(
        app-name: string,
        health-check-deadline-secs: u16,
        ) -> result<_, app-init-modify-error>;

    /// Deploys a new app with a cleanup routine.
    /// If an error occurs during app configuration,
    /// the app is deleted, leaving the state as it was before this function was called.
    /// If the cleanup fails as well `cleanup-error` is raised.
    app-init: func(
        org-slug: string,
        app-name: string,
        config: obelisk-config,
        health-check-deadline-secs: u16,
        skip-cleanup-on-error: bool,
        ) -> result<_, app-init-error>;
}

world exports {
    export workflow;
}
